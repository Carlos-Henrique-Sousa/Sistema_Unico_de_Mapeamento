from rest_framework.permissions import IsAuthenticated, IsAdminUser
from rest_framework.permissions import IsAuthenticated, IsAdminUser
# escola/views.py
from rest_framework import viewsets, status
from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework.permissions import IsAuthenticated
from core.permissions import IsEscola, IsProfessor
from .models import Escola, Turma, Liberacao, Jogo, TimeJogo
from .serializers import (
    EscolaSerializer, TurmaSerializer, LiberacaoSerializer, JogoSerializer, TimeJogoSerializer
)
from estudantes.models import Estudante
from professores.models import Professor

class EscolaViewSet(viewsets.ModelViewSet):
    queryset = Escola.objects.all()
    serializer_class = EscolaSerializer
    permission_classes = [IsAuthenticated, IsEscola | IsAdminUser]

    def perform_create(self, serializer):
        serializer.save(usuario=self.request.user)

class TurmaViewSet(viewsets.ModelViewSet):
    queryset = Turma.objects.all()
    serializer_class = TurmaSerializer
    permission_classes = [IsAuthenticated, IsEscola | IsProfessor]

    def get_queryset(self):
        if self.request.user.tipo == 'escola':
            return Turma.objects.filter(escola__usuario=self.request.user)
        return super().get_queryset()

class PreCadastroAlunoAPIView(APIView):
    permission_classes = [IsAuthenticated, IsEscola]

    def post(self, request):
        data = request.data
        user = User.objects.create_user(
            identificador=data['identificador'],
            senha=data['senha'],
            tipo='aluno',
            nome=data['nome'],
            email=data.get('email')
        )
        estudante = Estudante.objects.create(usuario=user)
        return Response({'message': 'Aluno precadastrado com sucesso'}, status=status.HTTP_201_CREATED)

class PreCadastroProfessorAPIView(APIView):
    permission_classes = [IsAuthenticated, IsEscola]

    def post(self, request):
        data = request.data
        user = User.objects.create_user(
            identificador=data['identificador'],
            senha=data['senha'],
            tipo='professor',
            nome=data['nome'],
            email=data.get('email')
        )
        professor = Professor.objects.create(usuario=user)
        return Response({'message': 'Professor precadastrado com sucesso'}, status=status.HTTP_201_CREATED)

class LiberacaoViewSet(viewsets.ModelViewSet):
    queryset = Liberacao.objects.all()
    serializer_class = LiberacaoSerializer
    permission_classes = [IsAuthenticated, IsEscola | IsProfessor]

    def perform_create(self, serializer):
        serializer.save(liberado_por=self.request.user)

class JogoViewSet(viewsets.ModelViewSet):
    queryset = Jogo.objects.all()
    serializer_class = JogoSerializer
    permission_classes = [IsAuthenticated, IsEscola | IsProfessor | IsAluno]

    def get_queryset(self):
        return Jogo.objects.filter(escola__usuario=self.request.user) if self.request.user.tipo == 'escola' else super().get_queryset()

class TimeJogoViewSet(viewsets.ModelViewSet):
    queryset = TimeJogo.objects.all()
    serializer_class = TimeJogoSerializer
    permission_classes = [IsAuthenticated]

class DashboardEscolaAPIView(APIView):
    permission_classes = [IsAuthenticated, IsEscola]

    def get(self, request):
        escola = Escola.objects.get(usuario=request.user)
        turmas = Turma.objects.filter(escola=escola).count()
        data = {
            'escola': EscolaSerializer(escola).data,
            'turmas_count': turmas,
        }
        return Response(data)