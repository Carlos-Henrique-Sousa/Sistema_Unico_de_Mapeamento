# Generated by Django 4.2.5 on 2025-08-21 16:23

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import simple_history.models
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('identifier', models.CharField(max_length=20, unique=True, validators=[django.core.validators.RegexValidator(code='invalid_identifier', message='O identificador deve conter apenas caracteres alfanuméricos, #, @, _ ou -.', regex='^[a-zA-Z0-9#@_-]+$')])),
                ('email', models.EmailField(blank=True, max_length=255, null=True, unique=True)),
                ('nome', models.CharField(blank=True, max_length=255)),
                ('type', models.CharField(choices=[('admin', 'Admin'), ('escola', 'Escola'), ('professor', 'Professor'), ('aluno', 'Aluno'), ('responsavel', 'Responsavel')], db_index=True, max_length=60)),
                ('is_active', models.BooleanField(default=True, verbose_name='ativo')),
                ('is_staff', models.BooleanField(default=False)),
                ('metadata', models.JSONField(blank=True, null=True, verbose_name='metadados')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='criado em')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='atualizado em')),
                ('group', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='core_usuario_set_groups', to='auth.group', verbose_name='grupo')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to.', related_name='core_user_set', related_query_name='core_user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, related_name='core_usuario_set_permissions', to='auth.permission', verbose_name='permissões de usuário')),
            ],
            options={
                'verbose_name': 'usuário',
                'verbose_name_plural': 'usuários',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='HistoricalUser',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(db_index=True, error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)),
                ('identifier', models.CharField(db_index=True, max_length=20, validators=[django.core.validators.RegexValidator(code='invalid_identifier', message='O identificador deve conter apenas caracteres alfanuméricos, #, @, _ ou -.', regex='^[a-zA-Z0-9#@_-]+$')])),
                ('email', models.EmailField(blank=True, db_index=True, max_length=255, null=True)),
                ('nome', models.CharField(blank=True, max_length=255)),
                ('type', models.CharField(choices=[('admin', 'Admin'), ('escola', 'Escola'), ('professor', 'Professor'), ('aluno', 'Aluno'), ('responsavel', 'Responsavel')], db_index=True, max_length=60)),
                ('is_active', models.BooleanField(default=True, verbose_name='ativo')),
                ('is_staff', models.BooleanField(default=False)),
                ('metadata', models.JSONField(blank=True, null=True, verbose_name='metadados')),
                ('created_at', models.DateTimeField(blank=True, editable=False, verbose_name='criado em')),
                ('updated_at', models.DateTimeField(blank=True, editable=False, verbose_name='atualizado em')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('group', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='auth.group', verbose_name='grupo')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'histórico',
                'verbose_name_plural': 'historical usuários',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
    ]
